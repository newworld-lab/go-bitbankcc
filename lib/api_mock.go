// Code generated by MockGen. DO NOT EDIT.

// Package lib is a generated GoMock package.
package lib

import (
	gomock "github.com/golang/mock/gomock"
	constant "github.com/newworld-lab/go-bitbankcc/constant"
	entity "github.com/newworld-lab/go-bitbankcc/entity"
	reflect "reflect"
	time "time"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// GetTicker mocks base method
func (m *MockAPI) GetTicker(pair constant.TypePair) (*entity.Ticker, error) {
	ret := m.ctrl.Call(m, "GetTicker", pair)
	ret0, _ := ret[0].(*entity.Ticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicker indicates an expected call of GetTicker
func (mr *MockAPIMockRecorder) GetTicker(pair interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicker", reflect.TypeOf((*MockAPI)(nil).GetTicker), pair)
}

// GetDepth mocks base method
func (m *MockAPI) GetDepth(pair constant.TypePair) (*entity.Depth, error) {
	ret := m.ctrl.Call(m, "GetDepth", pair)
	ret0, _ := ret[0].(*entity.Depth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepth indicates an expected call of GetDepth
func (mr *MockAPIMockRecorder) GetDepth(pair interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepth", reflect.TypeOf((*MockAPI)(nil).GetDepth), pair)
}

// GetTransactions mocks base method
func (m *MockAPI) GetTransactions(pair constant.TypePair, time *time.Time) (entity.Transactions, error) {
	ret := m.ctrl.Call(m, "GetTransactions", pair, time)
	ret0, _ := ret[0].(entity.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions
func (mr *MockAPIMockRecorder) GetTransactions(pair, time interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockAPI)(nil).GetTransactions), pair, time)
}

// GetAssets mocks base method
func (m *MockAPI) GetAssets() {
	m.ctrl.Call(m, "GetAssets")
}

// GetAssets indicates an expected call of GetAssets
func (mr *MockAPIMockRecorder) GetAssets() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssets", reflect.TypeOf((*MockAPI)(nil).GetAssets))
}
